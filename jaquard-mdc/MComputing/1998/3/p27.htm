<html><head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Windmills -- Two Steps Closer to Objects in M[UMPS]</title></head>
<body background="../../mb.gif">
<p><img src="../../mast050.jpg"></p>

<h3>Volume 6, number 3, August 1998, pages 27-29</h3>

<h2>Wind<img src="../../wmmta.gif" width="22" height="17" align=baseline>ills<br>
Two Steps Closer to Objects in M[UMPS]</h2>

<img src="../../EdDeMoel.jpg" width=88 height=128 align=left>

<h3>by Ed J.P.M. de Moel</h3>

<p>During the last week of June this year, the MDC convened a
"special meeting". The "special" character of this meeting had to
do with the desire to finalize the work on drafting the next
version of the ANSI standard for M[UMPS]. At this meeting, the
votes were limited to only those documents that were at that time
at a status that was high enough to have a fair chance of ending
up in this next issue of the standard.</p>

<p>The documents that are discussed below are additions to
"X11.1", the M[UMPS] language standard. I hope to be able to
report on features for "X11.7", the new language called Omega, in
future columns.</p>

<h3>User Defined <u>ssvn</u>s</h3>

<p>One of the documents that passed as an MDC Type A Extension at
this meeting was the one titled "User Defined <u>ssvn</u>s". The
"ssvn", or "structured system variable", is an entity in the
M[UMPS] language that looks like a global variable, and behaves
like a property list. For instance,</p>

<p><center><tt>^$G("^ABC","CHARACTER")</tt></center></p>

<p>(with ^$G being the abbreviation for ^$GLOBAL) is a reference
that identifies the "character set" property for the global
variable that is named as the first "subscript".</p>

<p>The "<u>ssvn</u>s" that were introduced in the 1995 version of
the ANSI standard for M[UMPS] are ^$Character, ^$Device, ^$Global,
^$Job ^$Library, ^$Lock, ^$Routine and ^$System. The MWAPI
standard added ^$Event and ^$Window.</p>

<p>Each of these variables can be used to inspect or redefine
properties of the system structure to which they relate. As a
side-effect of being accessed through a M[UMPS] oriented syntax,
it is possible to apply the function $ORDER using the first
subscript only, and thus find out which "objects" are the
components of the structure in question:</p>

<pre>
        Set r=""
        For  Set r=$Order(^$R(r)) ...
</pre>

<p>will allow the M[UMPS] programmer to loop through the routine
directory. Even though the value of $Data(^$R("name")) will
typically be either 0 (when there is no routine named "name"), or
10 (when there is such a routine, and its properties will be
accessible using references with more subscripts), the function
$ORDER will still find all available routines.</p>

<p>So far, the use of <u>ssvn</u>s has remained mostly limited by
the amount of features that the implementors have made available.
The introduction of ^$Job made the capability to</p>

<p><center><tt>Kill ^$Job(number)</tt></center></p>

<p>an obvious candidate for implementation (most likely
restricted to users with sufficient privileges), but, so far, I
don't know of any implementation that did make this feature
available.</p>

<p>In this light, the addition of "user defined <u>ssvn</u>s" may
seem fairly academic. However, the capability to</p>

<pre>
        Set prop="Name"
        Set id= ... ; unique identifier
        Set ^$MyCust(id,prop)=x
</pre>

<p>opens the possibility to create logic "behind the scenes" that
would not only assign a new value to the "name" property of my
customer database, and also update any cross-references that are
based on that name.</p>

<p>In other words, the code that is invoked "behind the scenes" to
execute the SET command in this context would be the class library
function that replaces the value of the "name" property, and that
will take care of all "internal bookkeeping" that is inherent to
such modifications.</p>

<p>What remains implementation-specific is the method that
establishes the name of the routine that will be invoked when an
action is undertaken that involves a "user defined <u>ssvn</u>".
What has been standardized is the list of labels within that
routine that will be called for the various actions:</p>

<p><table>
<tr><th align=left>Context</th><th align=left>Label</th></tr>

<tr><td align=left>$DATA</td><td align=left><tt>%DATA</tt></td></tr>

<tr><td align=left>$GET</td><td align=left><tt>%GET</tt></td></tr>

<tr><td align=left>$ORDER</td><td align=left><tt>%ORDER</tt></td></tr>

<tr><td align=left>$QUERY</td><td align=left><tt>%QUERY</tt></td></tr>

<tr><td align=left>KILL</td><td align=left><tt>%KILL</tt></td></tr>

<tr><td align=left>KSUBSCRIPT</td><td align=left><tt>%KSUBSCRIPT</tt></td></tr>

<tr><td align=left>KVALUE</td><td align=left><tt>%KVALUE</tt></td></tr>

<tr><td align=left>MERGE</td><td align=left><tt>%MERGE</tt></td></tr>

<tr><td align=left></td><td align=left><tt>%MERGES</tt></td></tr>

<tr><td align=left>SET</td><td align=left><tt>%SET</tt></td></tr>

<tr><td align=left>Evaluation in an expression</td><td align=left><tt>%VALUE</tt></td></tr>
</table></p>

<p>The entry point %SET is also called when a value is assigned
through other commands (such as READ and MERGE).</p>

<p>In the context of MERGE, the entry point MERGE is called when
the reference to the <u>ssvn</u> occurs on the right hand side of
the equal sign, and the entry point MERGES is called when the
reference occurs on the left hand side.</p>

<p>So,</p>

<p><center><tt>Set x=^$MyCust(id,prop)</tt></center></p>

<p>will basically be executed as</p>

<p><center><tt>Set x=$$%VALUE^...(id,prop)</tt></center></p>

<p>and</p>

<p><center><tt>Set ^$MyCust(id,prop)=x</tt></center></p>

<p>will be executed as</p>

<p><center><tt>Do %SET^...(name,x)</tt></center></p>

<p>where the value of name is the canonic form of the name of the
<u>ssvn</u> in question (with all values in its subscripts
resolved).</p>

<p>This new tool offers an important step into the direction of
support for object oriented programming. True encapsulation,
however, is not yet part of this extension. It would be necessary
to be able to protect certain global variables from any access
other than through their "class libraries" and hopefully such
features will be added in the not too distant future.
Nonetheless, the addition to the standard of the basic mechanism
for defining these class libraries is certainly a step that needs
to be taken as well!</p>

<h3>Object Usage</h3>

<p>Another document that was approved as an MDC Type A extension
at this meeting is entititled "Object Usage".</p>

<p>This document introduces a number of new concepts into the
language of M[UMPS]. The first new concept is the notion that
there are now two data types. The familiar string remains (of
course) as the most obvious and default data type, the new data
type is the "reference to an object". Other programming
environments would call this data type "pointer to an object" or
"handle for an object".</p>

<p>In order to find out what the data type is of an entity in
M[UMPS], a new function is introduced:</p>

<p><center><tt>$TYPE(expression-atom)</tt></center></p>

<p>returns a string that identifies the data type of the
expression atom that is passed as a parameter to this function.
This string-value is currently either "MVAL" to identify the
traditional string, or "OBJECT" to identify a reference to an
object.</p>

<p>In order to create references to objects, a new command is
introduced:</p>

<p><center><tt>ASSIGN object=expression</tt></center></p>

<p>In the context of this command, the entity on the right hand
side of the equal sign must return a value that is a reference to
an object, and the entity on the right hand side will usually be
the name of a local variable.</p>

<p>The main difference between</p>

<p><center><tt>SET variable=value</tt></center></p>

<p>and</p>

<p><center><tt>ASSIGN variable=value</tt></center></p>

<p>is that the SET command will "coerce" the value on the right
hand side to become a value of the traditional data type "string",
whereas the ASSIGN command will perform no data type coercion,
and will insist on finding a reference to an object on the right
hand side of the equal sign.</p>

<p>In the context of the SET command, the term "data type
coercion" is introduced. This term means that, if the data type
of the value on the right hand side of the equal sign happens to
be a reference to an object, something special will happen: the
system will look for a "default property" and return the value of
that default property. If the value of this "default property"
once again is a reference to an object, the coercion process will
re-iterate, until a value of the traditional string data type can
be returned. (When, in this context, an object is encountered
that does not have a "default property", an error will be
reported.)</p>

<p>In order to check whether two references to objects are
identical, a new operator is introduced. The expression</p>

<p><center><tt>A==B</tt></center></p>

<p>(two equal signs) is true if and only if both operands are
references to objects, and both operands refer to the same
object.</p>

<p>Finally, references to properties and methods are made
accessible in a fashion that will be very familiar to those who
have worked with objects in other languages: in a reference to a
property or method, a period is used to separate the various
components in the reference. For instance, assuming that the
value of local variable Word is a reference to an instance of a
popular word processor program:</p>

<p><center><tt>Set Word.Application.Visible=1</tt></center></p>

<p>would redefine the value of the property "Visible" of the
object called "Application" within the object called "Word" (with
MS-Word<SUp>TM</SUp>, this property controls the visibility of
the window that displays the application; 1 is visible, 0 is
invisible).</p>

<p>These additions are important building blocks that will make
working with objects a lot more straightforward in M[UMPS]. Of
course, a lot of work still remains to be done. The
standardization of the ASSIGN command may be an important first
step, but any functions that return references to objects still
remain implementation specific.</p>

<hr>

<p><a href="http://www.jacquardsystems.com"><img src="../../jsr2.gif"
 align=left></a><i>Ed de Moel is past chairman of the MDC
and works with Jacquard Systems Research.
His experience includes developing software for research in medicine
and physics.
Over the past ten years, Ed's has mostly focused on the production
of tools for data management and analysis, and tools for the support
of day-to-day operation of medical systems.
Ed can be
reached <a HREF="mailto:demoel@jacquardsystems.com.">by e-mail</a>.</i></p>

</body>
</html>
