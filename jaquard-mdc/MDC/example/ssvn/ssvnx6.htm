
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<html>
<title>EBCDIC (TM):</title>
<body background="../mbe.gif">
<h1>EBCDIC<sup>TM</sup></h1>

<p>(<b>Note</b>: the HyperText medium that is used to reproduce this
text imposes certain restrictions on which symbols can be
displayed. Those special symbols that cannot be rendered within
the confines of the HyperText browser will appear as two
asterisks (**). The printed version of this text will display all
special symbols as the correct graphics.)</p>

<p><table border=2>
<tr><th width=5%>&nbsp;</th>
<th width=5%>0</th>
<th width=5%>1</th>
<th width=5%>2</th>
<th width=5%>3</th>
<th width=5%>4</th>
<th width=5%>5</th>
<th width=5%>6</th>
<th width=5%>7</th>
<th width=5%>8</th>
<th width=5%>9</th>
<th width=5%>10</th>
<th width=5%>11</th>
<th width=5%>12</th>
<th width=5%>13</th>
<th width=5%>14</th>
<th width=5%>15</th></tr>

<tr><td>0</td>
<td>null</td>
<td>SOH</td>
<td>STX</td>
<td>ETX</td>
<td>PF</td>
<td>HT</td>
<td>LC</td>
<td>DEL</td>
<td>GE</td>
<td>RLF</td>
<td>SMM</td>
<td>VT</td>
<td>FF</td>
<td>CR</td>
<td>SO</td>
<td>SI</td></tr>

<tr><td>16</td>
<td>DLE</td>
<td>DC1</td>
<td>DC2</td>
<td>TM</td>
<td>RES</td>
<td>NL</td>
<td>BS</td>
<td>IL</td>
<td>CAN</td>
<td>EM</td>
<td>CC</td>
<td>CUI</td>
<td>IFS</td>
<td>IGS</td>
<td>IRS</td>
<td>IUS</td></tr>

<tr><td>32</td>
<td>DS</td>
<td>SOS</td>
<td>FS</td>
<td>&nbsp;</td>
<td>BYP</td>
<td>LF</td>
<td>ETB</td>
<td>ESC</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>SM</td>
<td>CU2</td>
<td>&nbsp;</td>
<td>ENQ</td>
<td>ACK</td>
<td>BELL</td></tr>

<tr><td>48</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>SYN</td>
<td>&nbsp;</td>
<td>PN</td>
<td>RS</td>
<td>UC</td>
<td>EOT</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>CU3</td>
<td>DC4</td>
<td>NAK</td>
<td>&nbsp;</td>
<td>SUB</td></tr>

<tr><td>64</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>[</td>
<td>.</td>
<td>&lt;</td>
<td>(</td>
<td>+</td>
<td>!</td></tr>

<tr><td>80</td>
<td>&amp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>]</td>
<td>$</td>
<td>*</td>
<td>)</td>
<td>;</td>
<td>^</td></tr>

<tr><td>96</td>
<td>-</td>
<td>/</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>|</td>
<td>,</td>
<td>%</td>
<td>_</td>
<td>&gt;</td>
<td>?</td></tr>

<tr><td>112</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>`</td>
<td>:</td>
<td>#</td>
<td>@</td>
<td>'</td>
<td>=</td>
<td>"</td></tr>

<tr><td>128</td>
<td>&nbsp;</td>
<td>a</td>
<td>b</td>
<td>c</td>
<td>d</td>
<td>e</td>
<td>f</td>
<td>g</td>
<td>h</td>
<td>i</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td></tr>

<tr><td>144</td>
<td>&nbsp;</td>
<td>j</td>
<td>k</td>
<td>l</td>
<td>m</td>
<td>n</td>
<td>o</td>
<td>p</td>
<td>q</td>
<td>r</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td></tr>

<tr><td>160</td>
<td>&nbsp;</td>
<td>~</td>
<td>s</td>
<td>t</td>
<td>u</td>
<td>v</td>
<td>w</td>
<td>x</td>
<td>y</td>
<td>z</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td></tr>

<tr><td>176</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td></tr>

<tr><td>192</td>
<td>{</td>
<td>A</td>
<td>B</td>
<td>C</td>
<td>D</td>
<td>E</td>
<td>F</td>
<td>G</td>
<td>H</td>
<td>I</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>**</td>
<td>&nbsp;</td>
<td>**</td>
<td>&nbsp;</td></tr>

<tr><td>208</td>
<td>}</td>
<td>J</td>
<td>K</td>
<td>L</td>
<td>M</td>
<td>N</td>
<td>O</td>
<td>P</td>
<td>Q</td>
<td>R</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td></tr>

<tr><td>224</td>
<td>\</td>
<td>&nbsp;</td>
<td>S</td>
<td>T</td>
<td>U</td>
<td>V</td>
<td>W</td>
<td>X</td>
<td>Y</td>
<td>Z</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>**</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td></tr>

<tr><td>240</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
<td>8</td>
<td>9</td>
<td>Ilvm</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td></tr>
</table></p>

<p>Notes for conversion:</p>

<p>In most EBCDIC environments are fields called "packed decimal".
The hints below may help in reading and "unpacking" these codes.</p>

<p>In IBM "packed decimal" representation, each digit occupies four bits,
i.e. IBM fits two digits in one byte. This is true for all bytes,
<b><i>except</i></b> for the rightmost byte.  In the rightmost byte,
a code for the sign is placed in the low order four bits (details
about this code are below).</p>

<p>The digits 0 through 9 are encoded in their natural hex form:<br>
 0 = "0000"<br>
 1 = "0001"<br>
 2 = "0010"<br>
 3 = "0011"<br>
 4 = "0100"<br>
 5 = "0101"<br>
 6 = "0110"<br>
 7 = "0111"<br>
 8 = "1000"<br>
 9 = "1001"</p>

<p>When an IBM system does arithmetic on such values, the codes
1010 through 1111 are invalid as digits, but are interpreted as
sign codes with 1010, 1100, 1110 and 1111 recognized as plus,
and 1011, 1101 recognized as minus.<br>
The codes 0000-1001 are invalid as signs.</p>

<p>When an IBM system converts an "ordinary" number into this packed
decimal form, the sign code generated depends on bit 12 of the
Program Status Word.  When bit 12 of the Program Status Word is
0, the preferred EBCDIC sign code is generated:  1100 for plus,
1101 for minus.  When bit 12 of the Program Status Word is 1, the
preferred ASCII-8 code is generated:  1010 for plus, 1011 for
minus.</p>

<p>When dealing with packed decimal numeric data as a M[UMPS]
programmer, handling all of the bytes, except the last is
straight-forward:  use the "natural" interpretation for
0000-1001, dealing with four bits at a time (using
<b>$ASCII</b>(char)\16 for the high-order four bits and
<b>$ASCII</b>(char)#16 for the low-order four bits.  In the last
byte, the high-order four bits contain the last digit, and the
low-order four bits contain the sign, as indicated above.</p>

<p>When packed decimal data is printed out as eight-bit EBCDIC
characters which are then converted to eight-bit ASCII characters,
one has to work "backwards".  For all but the last byte, look at
the ASCII character in each byte, convert it back to EBCDIC and
then use <b>$ASCII</b>(char)\16 for the high-order four bits and
<b>$ASCII</b>(char)#16 for the low-order four bits to figure out
what the original digits were.  For the last byte, you treat the
high-order four bits (<b>$ASCII</b>(char)\16) as a digit, and the
low order four bits (<b>$ASCII</b>(char)#16) half as a sign
according to the rules given above.</p>

<p>Make sure the format is indeed IBM's "packed decimal" format. <br>
There is also something called "zoned decimal" format.  It has
some similarities to "packed decimal", but also some differences,
especially in the meaning of the last byte.</p>

<p>Packed Decimal data can be decoded with:</p>

<p><tt>CvtPacked(x) ; Packed Decimal<br>
 <b>NEW</b> I,Hi,Lo,Result,V<br>
 <b>SET</b> Result=0<br>
 <b>FOR</b> I=1:1:<b>$LENGTH</b>(x) DO<br>
 . <b>SET</b> V=$ASCII(x,I)<br>
 . <b>SET</b> Hi=V\16<br>
 . <b>SET</b> Lo=V#16<br>
 . <b>SET</b> Result=Result*10+Hi*10+Lo<br>
 . <b>QUIT</b><br>
 <b>IF</b> Lo=15!(Lo=12) <b>SET</b> Result=Result-Lo/10<br>
 <b>ELSE  IF</b> Lo=13 <b>SET</b> Result=Lo-Result/10<br>
 <b>ELSE  SET $ECODE</b>=",U99," ; invalid sign nibble<br>
 <b>QUIT</b> Result<br>
<br>
CvtBinary(x) ; Binary<br>
 <b>NEW</b> I,Result<br>
 <b>SET</b> Result=0<br>
 <b>FOR</b> I=1:1:<b>$LENGTH</b>(x) <b>SET</b> Result=Result*256+<b>$ASCII</b>(x,I)<br>
 <b>QUIT</b> Result</tt></p>

<p>Note: These examples assume that the underlying platform is
"big-endian", but that's what IBM mainframes are.</p>

<hr>
</body></html>
